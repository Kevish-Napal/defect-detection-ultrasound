////// Parameters ////////// 
real lambda = 0.5;
int setting = 8; // Choose between 0 (homogeneous) and 8
int NSources=100; // Big N in the paper, number of sources and measurements
bool PlotFlag = true;

real Rext= 6.; // size of computational domain
real k=2.0*pi/lambda;

include "settings.edp"
include "initialisations.edp"
include "functions.edp"

if (PlotFlag)
{
    plot(Th,wait=1);
    plot(indice,fill=1,wait=1);
}


matrix<complex> EFL = computeDtN(k,Rext);
A=Atmp+EFL;
set(A,solver=sparsesolver); 

for (int incidence=0;incidence<NSources;incidence++)
{	real ttt=clock();
    cout<< "source numero" << incidence<<endl;

    UpdateScatteredField(Angle(incidence));
    

    
    
    if (PlotFlag)
    {
        UsoltotR = real(Usol);
        plot(UsoltotR,fill=1,wait=1);
    }
    
    	
    ComputeFarField(incidence);
        
    cout<< clock()-ttt<<endl;
}

SaveFarField("Data",setting);